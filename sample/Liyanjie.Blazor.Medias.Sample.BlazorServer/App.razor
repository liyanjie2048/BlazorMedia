@inject ILogger<App> Logger
@inject MediaController MediaController

<h2>Video</h2>
<section>
    <video id="videoId" width="640" height="360" preload="metadata">
        <source src="/video.mp4" type="video/mp4" />
    </video>
    <div>
        <button @onclick=@(()=>Print(MediaController.GetAsync("videoId")))>GetVideo</button>
        <button @onclick=@(()=>MediaController.PlayAsync("videoId"))>PLAY</button>
        <button @onclick=@(()=>MediaController.PauseAsync("videoId"))>PAUSE</button>
        <button @onclick=@(()=>MediaController.SetControlsAsync("videoId",video_controls=!video_controls))>CONTROLS</button>
        <button @onclick=@(()=>MediaController.SetLoopAsync("videoId",video_loop=!video_loop))>LOOP</button>
        <button @onclick=@(()=>MediaController.SetMutedAsync("videoId",video_muted=!video_muted))>MUTED</button>
        <button @onclick=@(()=>MediaController.SetFullscreenAsync("videoId",true))>FULLSCREEN</button>
    </div>
</section>
<h2>Audio</h2>
<section>
    <audio id="audioId" width="960">
        <source src="/audio.mp3" />
    </audio>
    <div>
        <button @onclick=@(()=>Print(MediaController.GetAsync("audioId")))>GetVideo</button>
        <button @onclick=@(()=>MediaController.PlayAsync("audioId"))>PLAY</button>
        <button @onclick=@(()=>MediaController.PauseAsync("audioId"))>PAUSE</button>
        <button @onclick=@(()=>MediaController.SetControlsAsync("audioId",video_controls=!video_controls))>CONTROLS</button>
        <button @onclick=@(()=>MediaController.SetLoopAsync("audioId",audio_loop=!audio_loop))>LOOP</button>
        <button @onclick=@(()=>MediaController.SetMutedAsync("audioId",audio_muted=!audio_muted))>MUTED</button>
    </div>
</section>

@code {
    bool video_controls = false;
    bool video_loop = false;
    bool video_muted = false;

    bool audio_loop = false;
    bool audio_muted = false;

    async void Print(ValueTask<MediaObject?> task)
    {
        try
        {
            var value = await task;
            if (value is not null)
            {
                Logger.LogInformation(System.Text.Json.JsonSerializer.Serialize(value));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "ERROR");
        }
    }
}